<?PHP
if (strtolower(basename($_SERVER["SCRIPT_FILENAME"])) === strtolower(basename(__FILE__))) { header("HTTP/1.0 404 Not found"); die(); } $_ENV['_AAS0'] =  (isset($_SERVER["HTTP_ACUNETIX_ASPECT"]) && $_SERVER["HTTP_ACUNETIX_ASPECT"] === "enabled"); if($_ENV['_AAS0']){ $_ENV['_AAS0'] = false; if(isset($_SERVER["HTTP_ACUNETIX_ASPECT_PASSWORD"])){ $fp = fopen(__FILE__, 'r'); fseek($fp, -32, SEEK_END); $_ENV["_AAS1"] = stream_get_contents($fp, 32); unset($fp); $_ENV['_AAS0'] = $_SERVER["HTTP_ACUNETIX_ASPECT_PASSWORD"] === $_ENV["_AAS1"]; } } function _AAS2() { $result = array(); foreach ($_ENV["_AAS3"] as $cls => $functions) { foreach ($functions as $name => $props) { $result[$name] = true; } } return $result; } if ($_ENV['_AAS0']) { if (!defined("T_ML_COMMENT")) { define("T_ML_COMMENT", T_COMMENT); } else { define("T_DOC_COMMENT", T_ML_COMMENT); } define("_AAS4", extension_loaded('mbstring')); define("_AAS5", (int)ini_get('mbstring.func_overload')); if (!defined("T_FILE")) define("T_FILE", 365); if (!defined("T_DIR")) define("T_DIR", 379); if (!defined("E_RECOVERABLE_ERROR")) { define("E_RECOVERABLE_ERROR", 4096); } define("_AAS6", base64_decode("PCEtLUFDVUFTUEVDVDo=") ); define("_AAS7", base64_decode("LS0+") ); define("_AAS8", "ACUSTART"); define("_AAS9", "ACUEND"); define("_AAS10", "36d50bf1b609ec9f1d167d4821110306"); $_ENV["SensorVersion"] = "4"; $_ENV["_AAS11"] = 8001; $_ENV["_AAS12"] = ""; $_ENV["_AAS13"] = false; $_ENV["_AAS14"] = false; $_ENV["_AAS15"] = ""; $_ENV["_AAS16"] = array(); $_ENV["_AAS17"] = array("\$_GET" => array("GET"), "\$_POST" => array("POST"), "\$_COOKIE" => array("Cookie"), "\$_REQUEST" => array("ANY")); $_ENV["_AAS18"] = array( "mysqli_query" => array("SQL_Query", array(2), false, "database=mysql"), "mysqli_real_query" => array("SQL_Query", array(2), false, "database=mysql"), "mysqli_multi_query" => array("SQL_Query", array(2), false, "database=mysql"), "mysqli_prepare" => array("SQL_Query", array(2), false, "database=mysql"), "mysqli_stmt_prepare" => array("SQL_Query", array(2), false, "database=mysql"), "mysql_query" => array("SQL_Query", array(1), false, "database=mysql"), "mysql_unbuffered_query" => array("SQL_Query", array(1), false, "database=mysql"), "mysql_db_query" => array("SQL_Query", array(2), false, "database=mysql"), "pg_query_params" => array("SQL_Query", array(1, 2), false, "database=pg"), "pg_query" => array("SQL_Query", array(1, 2), false, "database=pg"), "pg_prepare" => array("SQL_Query", array(2, 3), false, "database=pg"), "pg_send_query_params" => array("SQL_Query", array(2), false, "database=pg"), "pg_send_query" => array("SQL_Query", array(2), false, "database=pg"), "pg_send_prepare" => array("SQL_Query", array(3), false, "database=pg"), "mssql_query" => array("SQL_Query", array(1), false, "database=mssql"), "sqlsrv_prepare" => array("SQL_Query", array(2), false, "database=mssql"), "sqlsrv_query" => array("SQL_Query", array(2), false, "database=mssql"), "maxdb_query" => array("SQL_Query", array(2), false, "database=mysql"), "maxdb_multi_query" => array("SQL_Query", array(2), false, "database=mysql"), "maxdb_stmt_prepare" => array("SQL_Query", array(2), false, "database=mysql"), "maxdb_prepare" => array("SQL_Query", array(2), false, "database=mysql"), "maxdb_real_query" => array("SQL_Query", array(2), false, "database=mysql"), "sesam_query" => array("SQL_Query", array(1), false), "db2_exec" => array("SQL_Query", array(2), false), "ingres_query" => array("SQL_Query", array(1), false), "ifx_query" => array("SQL_Query", array(1), false), "ifx_prepare" => array("SQL_Query", array(1), false), "oci_parse" => array("SQL_Query", array(2), false, "database=oracle"), "ora_parse" => array("SQL_Query", array(2), false, "database=oracle"), "ociparse" => array("SQL_Query", array(2), false, "database=oracle"), "ibase_query" => array("SQL_Query", array(1, 2), false), "ibase_prepare" => array("SQL_Query", array(1, 2, 3), false), "fbird_query" => array("SQL_Query", array(1, 2), false), "fbird_prepare" => array("SQL_Query", array(1, 2, 3), false), "msql_query" => array("SQL_Query", array(1), false), "msql_db_query" => array("SQL_Query", array(2), false), "dbx_query" => array("SQL_Query", array(2), false), "ora_do" => array("SQL_Query", array(2), false, "database=oracle"), "odbc_do" => array("SQL_Query", array(2), false), "odbc_exec" => array("SQL_Query", array(2), false), "odbc_prepare" => array("SQL_Query", array(2), false), "sybase_query" => array("SQL_Query", array(1), false, "database=sybase"), "fopen" => array("", array(), "_AAS19"), "readfile" => array("File_Open", array(1), false), "file" => array("File_Open", array(1), false), "file_get_contents" => array("File_Open", array(1), false), "highlight_file" => array("File_Open", array(1), false), "file_put_contents" => array("Create_File", array(1), false), "file_exists" => array("", array(), "_AAS20"), "is_file" => array("", array(), "_AAS20"), "fsockopen" => array("URL_Open", array(1), false), "curl_exec" => array("", array(), "_AAS21"), "system" => array("Sys_Command", array(1), false), "exec" => array("Sys_Command", array(1), false), "shell_exec" => array("Sys_Command", array(1), false), "passthru" => array("Sys_Command", array(1), false), "popen" => array("Sys_Command", array(1), false), "proc_open" => array("Sys_Command", array(1), false), "expect_popen" => array("Sys_Command", array(1), false), "mail" => array("Send_Mail", array(1, 2, 3, 4), false), "header" => array("Set_Header", array(1), "_AAS22"), "set_error_handler" => array("", array(), "_AAS23"), "get_included_files" => array("", array(), "_AAS24"), "unserialize" => array("Unserialize", array(1), false), "ldap_search" => array("LDAP_Query", array(3), false), "unlink" => array("Delete_File", array(1), false), "mkdir" => array("Create_File", array(1), false), "move_uploaded_file" => array("", array(), "_AAS25"), "rmdir" => array("Delete_File", array(1), false), "create_function" => array("Create_Function", array(1, 2), false), "fwrite" => array("", array(), "_AAS26"), "fputs" => array("", array(), "_AAS26"), "fprintf" => array("", array(), "_AAS26") ); $_ENV["_AAS3"] = array( "mysqli" => array( "query" => array("SQL_Query", array(1), false, "database=mysql"), "real_query" => array("SQL_Query", array(1), false, "database=mysql"), "multi_query" => array("SQL_Query", array(1), false, "database=mysql"), "prepare" => array("SQL_Query", array(1), false, "database=mysql") ), "mysqli_stmt" => array( "prepare" => array("SQL_Query", array(1), false, "database=mysql") ), "sqlite3" => array( "query" => array("SQL_Query", array(1), false), "exec" => array("SQL_Query", array(1), false), "prepare" => array("SQL_Query", array(1), false), "querySingle" => array("SQL_Query", array(1), false) ), "pdo" => array( "exec" => array("SQL_Query", array(1), false), "query" => array("SQL_Query", array(1), false), "prepare" => array("SQL_Query", array(1), false) ), "maxdb" => array( "query" => array("SQL_Query", array(1), false), "multi_query" => array("SQL_Query", array(1), false), "prepare" => array("SQL_Query", array(1), false) ), "maxdb_stmt" => array( "prepare" => array("SQL_Query", array(1), false) ), "simplexmlelement" => array( "xpath" => array("XPath_Query", array(1), false) ) ); $_ENV["_AAS27"] = _AAS2(); $_ENV["_AAS28"] = array(); $_ENV["_AAS29"] = dirname($_SERVER["SCRIPT_FILENAME"]) . "/"; $_ENV["_AAS30"] = $_SERVER["SCRIPT_FILENAME"]; $_ENV["_AAS31"] = basename(__FILE__); $_ENV["_AAS32"] = getenv("_AAS32"); if (!$_ENV["_AAS32"]) { if (!function_exists("sys_get_temp_dir")) { if (!empty($_ENV["TMP"])) { $_ENV["_AAS32"] = realpath($_ENV["TMP"]); } else if (!empty($_ENV["TMPDIR"])) { $_ENV["_AAS32"] = realpath($_ENV["TMPDIR"]); } else if (!empty($_ENV["TEMP"])) { $_ENV["_AAS32"] = realpath($_ENV["TEMP"]); } else { $temp_file = tempnam(md5(uniqid(rand(), false)), ""); if ($temp_file) { $temp_dir = realpath(dirname($temp_file)); unlink($temp_file); $_ENV["_AAS32"] = $temp_dir; } else { $_ENV["_AAS32"] = false; } } } else { $_ENV["_AAS32"] = sys_get_temp_dir(); } } if ($_ENV["_AAS32"]) { $_ENV["_AAS32"] = str_replace("\\", "/", $_ENV["_AAS32"]); if (substr($_ENV["_AAS32"], -1) !== "/") $_ENV["_AAS32"] .= "/"; } else { _AAS33("unable to find a writable temporary folder"); } $_ENV["_AAS34"] = intval(ini_get("error_reporting")); $_ENV["_AAS35"] = array( E_ERROR => "Error", E_WARNING => "Warning", E_PARSE => "Parsing Error", E_NOTICE => "Notice", E_CORE_ERROR => "Core Error", E_CORE_WARNING => "Core Warning", E_COMPILE_ERROR => "Compile Error", E_COMPILE_WARNING => "Compile Warning", E_USER_ERROR => "User Error", E_USER_WARNING => "User Warning", E_USER_NOTICE => "User Notice", E_STRICT => "Runtime Notice", E_RECOVERABLE_ERROR => "Catchable Fatal Error" ); $_ENV["_AAS36"] = array(); } function _AAS21($filename, $line, $function_name, $arguments, $opt) { if (count($arguments) > 0 && is_resource($arguments[0]) && defined("CURLINFO_EFFECTIVE_URL")) { $url = curl_getinfo($arguments[0], CURLINFO_EFFECTIVE_URL); $trace = _AAS37(); if ($trace != "") $adlist = array("\"$function_name\" was called.\r\n$trace"); else $adlist = array("\"$function_name\" was called."); _AAS38("URL_Open", array($url), $filename, $line, $adlist); } return _AAS39($function_name, $arguments); } function _AAS20($filename, $line, $function_name, $arguments, $opt) { if (is_array($arguments) && count($arguments) == 1 && (strpos($arguments[0], _AAS8 . 'FILE') !== false || strpos($arguments[0], _AAS9 . 'FILE') !== false)) { if (strpos($arguments[0], _AAS8 . 'FILECREATE') !== false || strpos($arguments[0], _AAS9 . 'FILECREATE') !== false) return false; else return true; } else { return _AAS39($function_name, $arguments); } } function _AAS19($filename, $line, $function_name, $arguments, $opt) { $arg_filename = $arguments[0]; $arg_options = $arguments[1]; $trace = _AAS37(); if ($trace != "") $adlist = array("\"$function_name\" was called.\r\n$trace"); else $adlist = array("\"$function_name\" was called."); if (strpos($arg_options, 'w') !== false || strpos($arg_options, 'a') !== false || strpos($arg_options, 'x') !== false) { _AAS38('Create_File', array($arg_filename), $filename, $line, $adlist); } else { _AAS38('File_Open', array($arg_filename), $filename, $line, $adlist); } if (!(strpos($arguments[0], _AAS8) !== false || strpos($arguments[0], _AAS9) !== false)) { $result = _AAS39($function_name, $arguments); $_ENV["_AAS28"][(int)$result] = $arg_filename; return $result; } else { return false; } } function _AAS26($filename, $line, $function_name, $arguments, $opt) { $w_filename = $_ENV["_AAS28"][(int)$arguments[0]]; if (isset($w_filename)) { if (strcasecmp($function_name, "fprintf") === 0) { $res = array_shift($arguments); $to_write = _AAS39("sprintf", $arguments); array_unshift($arguments, $res); } else { $to_write = $arguments[1]; } $trace = _AAS37(); if ($trace != "") $adlist = array("\"$function_name\" was called.\r\n$trace"); else $adlist = array("\"$function_name\" was called."); if (($pos = strpos($to_write, _AAS8)) !== false) { $to_write = substr($to_write, $pos, 512); _AAS38('File_Write', array($w_filename, $to_write), $filename, $line, $adlist); } elseif (($pos = strpos($to_write, _AAS9)) !== false) { $to_write = substr($to_write, max(0, $pos - 512 + _AAS40(_AAS9)), 512); _AAS38('File_Write', array($w_filename, $to_write), $filename, $line, $adlist); } } return _AAS39($function_name, $arguments); } function _AAS24($filename, $line, $function_name, $arguments, $opt) { return ($_ENV['_AAS16']); } function _AAS25($filename, $line, $function_name, $arguments, $opt) { $result = _AAS39($function_name, $arguments); if ($result && ($real_path = realpath($arguments[1])) !== false) { $real_path = strtr($real_path, "\\", "/"); $trace = _AAS37(); $root = strtr(realpath($_SERVER['DOCUMENT_ROOT']), "\\", "/"); if (substr($root, -1, 1) !== "/") $root .= "/"; $uploadedURI = false; if (strpos($real_path, $root) === 0) { $uploadedURI = substr($real_path, _AAS40($root) - 1); } if ($uploadedURI) { _AAS38('File_Upload', array($uploadedURI), $filename, $line, array("\"$real_path\" was uploaded (platform PHP).\r\n$trace")); } else { _AAS38('Create_File', $arguments, $filename, $line, array("\"$function_name\" was called.\r\n$trace")); } } return $result; } function _AAS23($filename, $line, $function_name, $arguments, $opt) { _AAS41("$function_name called from $filename line $line"); $_ENV['_AAS12'] = $arguments; return true; } function _AAS22($filename, $line, $function_name, $arguments, $opt) { if (stripos($arguments[0], "content-length") === false) { return _AAS42($filename, $line, $function_name, $arguments, $_ENV['_AAS18'][$function_name]); } return true; } function _AAS43($errno, $errstr, $errfile, $errline) {  if ($errno != E_NOTICE && $errno != E_STRICT && $errno != E_WARNING && $errno != E_RECOVERABLE_ERROR) { _AAS41("Error: " . $errstr . " Type: " . $_ENV['_AAS35'][$errno] . " Line $errline, File $errfile"); _AAS44(); } if ($errno == E_USER_ERROR || $errno == E_ERROR) _AAS44(); if (is_array($_ENV['_AAS12']) && count($_ENV['_AAS12']) > 0) { if (is_string($_ENV['_AAS12'][0]) && function_exists($_ENV['_AAS12'][0])) { if (!isset($_ENV['_AAS12'][1]) || ($_ENV['_AAS12'][1] & $errno != 0)) { $args = func_get_args(); _AAS39($_ENV['_AAS12'][0], $args); } } elseif (is_array($_ENV['_AAS12'][0]) && is_object($_ENV['_AAS12'][0][0])) { if (!isset($_ENV['_AAS12'][1]) || ($_ENV['_AAS12'][1] & $errno != 0)) { $args = func_get_args(); call_user_func_array(array($_ENV['_AAS12'][0][0], $_ENV['_AAS12'][0][1]), $args); } } } elseif (($errno & $_ENV["_AAS34"]) != 0) { switch ($errno) { case E_USER_ERROR: case E_RECOVERABLE_ERROR: case E_ERROR: echo "<b>Fatal error</b>: $errstr in <b>" . $_ENV['_AAS30'] . "</b> on line <b>$errline</b><br />\n"; break; case E_USER_WARNING: case E_WARNING: echo "<b>Warning</b>: $errstr in <b>" . $_ENV['_AAS30'] . "</b> on line <b>$errline</b><br />\n"; break; case E_USER_NOTICE: case E_NOTICE: case E_STRICT: break; default: echo "<b>Unknown error type $errno</b>: $errstr in <b>" . $_ENV['_AAS30'] . "</b> on line <b>$errline<b><br />\n"; break; } } return true; } function _AAS39($function, $arguments) { switch (count($arguments)) { case 0: return $function(); break; case 1: return $function($arguments[0]); break; case 2: return $function($arguments[0], $arguments[1]); break; case 3: return $function($arguments[0], $arguments[1], $arguments[2]); break; case 4: return $function($arguments[0], $arguments[1], $arguments[2], $arguments[3]); break; case 5: return $function($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]); break; default: return call_user_func_array($function, $arguments); break; } } function _AAS33($error = null) { if (isset($_ENV["_AAS13"]) && $_ENV["_AAS13"] === true) { _AAS45(); } if (isset($_ENV["_AAS14"]) && $_ENV["_AAS14"] === true) { _AAS46(); } _AAS44(); if ($error !== null) { _AAS41($error); die("PHP sensor error: $error"); return; } die(); } function _AAS47($filename, $relative_to = false) { $actual_path = realpath($filename); if ($actual_path === false) { $include_paths = explode(PATH_SEPARATOR, ini_get("include_path")); foreach ($include_paths as $path) { if (($actual_path = realpath("$path/$filename")) !== false) { break; } } } if ( $actual_path === false && $relative_to !== false && $filename[0] !== "." && $filename[0] !== "/" && $filename[0] !== "\\" ) { $actual_path = realpath(dirname($relative_to) . "/" . $filename); } if ($actual_path === false) { return false; } return str_replace("\\", "/", $actual_path); } function _AAS48($caller, $callerline, $required, $once, $function_name, $filename) { if ( strpos($filename, _AAS8) !== false || strpos($filename, _AAS9) !== false ) return $filename; $actual_path = _AAS47($filename, $caller); if ($actual_path === false) { _AAS41("sensor has failed to find file \"$filename\" included by \"$function_name\" from file \"$caller\""); return $filename; $actual_path = $filename; } $already_included = in_array($actual_path, $_ENV['_AAS16']); if (!$already_included) { array_push($_ENV['_AAS16'], $actual_path); } return _AAS49::getURL($actual_path); } function _AAS50($filename, $line, ...$parameters) { if (is_array($parameters) && count($parameters) >= 1) { _AAS38("PHP_Code_Eval", $parameters[0], $filename, $line); return _AAS51::ProcessEvaledCode($filename, $line, $parameters[0]); } _AAS41("expected code argument for eval is missing in $filename:$line"); return ""; } function _AAS52($filename, $line, $function, ...$arguments) { if (!is_string($function)) { if (is_callable($function)) { return call_user_func_array($function, $arguments); } else { return false; } } if (array_key_exists($function, $_ENV['_AAS18'])) { $opt = $_ENV['_AAS18'][$function]; } else { $opt = false; } if ($opt === false) { return _AAS39($function, $arguments); } if ($opt[2] !== false && function_exists($opt[2])) { return $opt[2]($filename, $line, $function, $arguments, $opt); } else { return _AAS42($filename, $line, $function, $arguments, $opt); } } function _AAS42($filename, $line, $function, $arguments, $opt) { $calloriginal = true; $alist = array(); for ($i = 0; $i < count($arguments); $i++) { $str_val = _AAS53($arguments[$i]); if ($calloriginal && _AAS54($str_val)) $calloriginal = false; if (in_array($i + 1, $opt[1])) { array_push($alist, substr($str_val, 0, $_ENV["_AAS11"])); } } $trace = _AAS37(); if ($trace != "") { $adlist = array("\"$function\" was called.\r\n$trace"); } else { $adlist = array("\"$function\" was called."); } for ($i = 3; $i < count($opt); $i++) { if (isset($opt[$i])) { array_push($adlist, $opt[$i]); } } _AAS38($opt[0], $alist, $filename, $line, $adlist); if ($calloriginal) { return _AAS39($function, $arguments); } return false; } function _AAS55($object, $function) { if (!is_object($object)) { return null; } $class_name = @get_class($object); if ($class_name === false) { return null; } $class_opt = &$_ENV["_AAS3"][strtolower($class_name)]; if ($class_opt === null) { return null; } return @$class_opt[$function]; } function _AAS56($filename, $line, $object, $function, ...$arguments) { $opt = _AAS55($object, $function); if ($opt === null) { return call_user_func_array(array($object, $function), $arguments); } if ($opt[2] !== false && function_exists($opt[2])) { return $opt[2]($filename, $line, $object, $function, $arguments, $opt); } return _AAS57($filename, $line, $object, $function, $arguments, $opt, true); } function _AAS57($filename, $line, $object, $function, $arguments, $opt, $call_original) { $should_call_original = $call_original; $alist = array(); $class_name = @get_class($object); for ($i = 0; $i < count($arguments); $i++) { $str_val = _AAS53($arguments[$i]); if (in_array($i + 1, $opt[1])) { array_push($alist, substr($str_val, 0, $_ENV["_AAS11"])); } if ($should_call_original && _AAS54($str_val)) { $should_call_original = false; } } $trace = _AAS37(); if ($trace != "") { $adlist = array("\"$class_name::$function\" member function was called.\r\n$trace"); } else { $adlist = array("\"$class_name::$function\" member function was called."); } for ($i = 3; $i < count($opt); $i++) { if (isset($opt[$i])) { array_push($adlist, $opt[$i]); } } _AAS38($opt[0], $alist, $filename, $line, $adlist); if ($should_call_original) { return call_user_func_array(array($object, $function), $arguments); } else { return false; } } function _AAS58($filename, $line, $var_name, $index) { $opt = $_ENV["_AAS17"][$var_name]; if (isset($opt)) { _AAS38("Var_Access", array($opt[0], $index), $filename, $line); } return $index; } function _AAS41($message) { error_log("PHP AcuSensor: " . $message); } function _AAS40($str) { if (_AAS4 && (_AAS5 & 2)) { return mb_strlen($str, 'latin1'); } else { return strlen($str); } } function _AAS38($key, $msg, $file, $line, $additional_data = "") { $buf = ""; $buf .= sprintf("%08X%s", _AAS40($key), $key); if (is_array($msg)) { $buf .= "a" . sprintf("%08X", count($msg)); for ($i = 0; $i < count($msg); $i++) { $buf .= sprintf("%08X%s", _AAS40($msg[$i]), $msg[$i]); } } elseif ($msg !== "") { $buf .= "s" . sprintf("%08X%s", _AAS40($msg), $msg); } else { $buf .= "n"; } $buf .= sprintf("%08X%s%08X", _AAS40($file), $file, $line); if (is_array($additional_data)) { $buf .= "a" . sprintf("%08X", count($additional_data)); for ($i = 0; $i < count($additional_data); $i++) { $buf .= sprintf("%08X%s", _AAS40($additional_data[$i]), $additional_data[$i]); } } elseif ($additional_data !== "") { $buf .= "s" . sprintf("%08X%s", _AAS40($additional_data), $additional_data); } else { $buf .= "n"; } if (strlen($_ENV['_AAS15']) > 0x500000 ) { $fp = @tmpfile(); if ($fp) { $_ENV['_AAS59'] = $fp; fwrite($_ENV['_AAS59'], $_ENV['_AAS15']); $_ENV['_AAS15'] = ''; } } if (isset($_ENV['_AAS59']) && $_ENV['_AAS59']) { fwrite($_ENV['_AAS59'], $buf); } else { $_ENV['_AAS15'] .= $buf; } _AAS41("output: Key=$key"); } function _AAS44() {  if (isset($_ENV['_AAS59']) && $_ENV['_AAS59']) { @fseek($_ENV['_AAS59'], 0); echo (_AAS6); while (!feof($_ENV['_AAS59'])) { $data = fread($_ENV['_AAS59'], 0xC00 ); if ($data) { echo (base64_encode($data)); } } echo (_AAS7); @fclose($_ENV['_AAS59']); unset($_ENV['_AAS59']); } else { $l = _AAS40($_ENV['_AAS15']);  echo _AAS6 . base64_encode($_ENV['_AAS15']) . _AAS7; $_ENV['_AAS15'] = ""; } } function _AAS60($dir, $max_depth, $max_count) { $result = array(); if ($max_depth <= 0 || $max_count <= 0) { return $result; } if (substr($dir, -1) != "/") $dir .= "/"; if (is_dir($dir) && $h = @opendir($dir)) { $max_new_item_count = $max_count; $subdirs = array(); while (($file = readdir($h)) !== false && $max_new_item_count > 0) { if (is_dir($dir . $file) && $max_depth > 1 && $file != "." && $file != "..") { array_push($subdirs, $dir . $file . "/"); } elseif (is_file($dir . $file) && ($file !== $_ENV["_AAS31"])) { array_push($result, str_replace($_ENV['_AAS29'], "", $dir . $file)); $max_new_item_count--; } } if ($max_new_item_count > 0) { foreach ($subdirs as $subdir) { $new_items = _AAS60($subdir, $max_depth - 1, $max_new_item_count); $max_new_item_count -= count($new_items); $result = array_merge($result, $new_items); if ($max_new_item_count <= 0) { break; } } } } return $result; } function _AAS37($hide_aop = true) { if (!function_exists("debug_backtrace")) { return ""; } $backtrace = debug_backtrace(); $hi = count($backtrace) - 1; if ($hide_aop) { while ($hi >= 0 && $backtrace[$hi]["function"] === "eval") $hi--; if ($hi <= 0) return ""; } $result = ""; $index = 1; for ($i = 0; $i <= $hi; $i++) { if ( $hide_aop && (strpos($backtrace[$i]["function"], "_AAS") !== false || strpos($backtrace[$i]["function"], "__AAOP") !== false || strpos($backtrace[$i]["function"], "call_user_func_array") !== false) || strpos($backtrace[$i]["function"], "call_user_method_array") !== false ) continue; $class = isset($backtrace[$i]["class"]) ? $backtrace[$i]["class"] . "::" : ""; $function = isset($backtrace[$i]["function"]) ? $backtrace[$i]["function"] : "[Unknown function]"; if (isset($backtrace[$i]["args"])) { $function .= "("; for ($j = 0; $j < count($backtrace[$i]["args"]); $j++) { $type = gettype($backtrace[$i]["args"][$j]); $function .= "[$type] "; switch ($type) { case "array": $function .= "count=" . count($backtrace[$i]["args"][$j]); break; case "object": $function .= "class=" . get_class($backtrace[$i]["args"][$j]); break; case "string": if (_AAS40($backtrace[$i]["args"][$j]) > 32) $function .= "\"" . str_replace(array("\r\n", "\n", "\r"), array("\\n", "\\n", "\\n"), substr($backtrace[$i]["args"][$j], 0, 32)) . "...\""; else $function .= "\"" . str_replace(array("\r\n", "\n", "\r"), array("\\n", "\\n", "\\n"), $backtrace[$i]["args"][$j]) . "\""; break; case "boolean": $function .= $backtrace[$i]["args"][$j] ? "true" : "false"; break; default: $function .= $backtrace[$i]["args"][$j]; } if ($j < count($backtrace[$i]["args"]) - 1) $function .= ", "; } $function .= ")"; } else { $function .= "()"; } $result .= "  $index. $class$function"; $index++; if ($i < $hi) $result .= "\r\n"; } if ($result != "") { return "Stack trace:\r\n" . substr($result, 0, $_ENV["_AAS11"]); } return ""; } function _AAS61() { $res = ""; foreach ($_GET as $key => $value) { $res .= rawurlencode($key) . "=" . rawurlencode($value) . "&"; } if ($res != "") $res = substr($res, 0, -1); return $res; } function _AAS54($str) { return strpos($str, _AAS8) !== false || strpos($str, _AAS9) !== false; } function _AAS53($var) { try { if (is_scalar($var)) { return @strval($var); } else { return (new _AAS62($var))->__toString(); } } catch (\Exception $e) { return ''; } } function _AAS63($obj) { $reflectionObject = new ReflectionObject($obj); _AAS41($reflectionObject->getFileName() . ' - ' . $reflectionObject->getName()); foreach ($reflectionObject->getMethods() as $method) { if ($method->isPublic()) { _AAS41('  public ' . $method->name); } } } function _AAS64($cls) { $reflection = new ReflectionClass($cls); _AAS41($reflection->getFileName() . ' - ' . $reflection->getName()); foreach ($reflection->getMethods() as $method) { $mods = ''; if ($method->isPublic()) { $mods .= ' public '; } if ($method->isStatic()) { $mods .= ' static '; } _AAS41($mods . $method->name); } } class _AAS62 { private $reflect; public $object; public function __construct($object) { $this->object = $object; if ($object === null) { $this->reflect = null; } else if (is_object($object)) { $this->reflect = new ReflectionObject($object); } else { $this->reflect = null; } } public function __call($name, $arguments) { if ($this->reflect !== null && $this->reflect->hasMethod($name)) { $method = $this->reflect->getMethod($name); return new _AAS62($method->invokeArgs($this->object, $arguments)); } return new _AAS62(null); } public function __get($name) { if ($this->reflect !== null && $this->reflect->hasProperty($name)) { $property = $this->reflect->getProperty($name); $property->setAccessible(true); return new _AAS62($property->getValue($this->object)); } return new _AAS62(null); } public function __toString() { if ($this->reflect !== null && $this->reflect->hasMethod('__toString')) { $method = $this->reflect->getMethod('__toString'); return $method->invoke($this->object); } return ''; } } function _AAS65() { $alerts = array(); if (($derr = ini_get("display_errors")) === "1" || strtolower($derr) === "stdout" ) array_push($alerts, "display_errors=" . $derr); if (ini_get("register_globals") === "1") array_push($alerts, "register_globals_on=on"); if (ini_get("magic_quotes_gpc") !== "1" && ini_get("magic_quotes_gpc") !== false) array_push($alerts, "magic_gpc_off=off"); if (ini_get("allow_url_fopen") === "1") array_push($alerts, "allow_url_fopen_on=on"); if (ini_get("allow_url_include") === "1") array_push($alerts, "allow_url_include_on=on"); if (ini_get("session.use_trans_sid") === "1") array_push($alerts, "session.use_trans_sid_on=on"); if (ini_get("open_basedir") === "") array_push($alerts, "open_basedir_not_set="); if ((ini_get("enable_dl") === "1") && (ini_get("safe_mode") === "1") ) array_push($alerts, "enable_dl_safe_mode_on="); array_push($alerts, "php_version=" . phpversion()); if (count($alerts) > 0) _AAS38("Aspect_Alerts", $alerts, $_SERVER["SCRIPT_FILENAME"], 0); } function _AAS66($name, $value) { if (isset($_ENV[$name]) && $_ENV[$name] === $value) { return true; } return false; } function _AAS67() { $alerts = array(); if (_AAS68()) { if (_AAS66("APP_DEBUG", "true")) { array_push($alerts, "laravel_debug_mode=true"); } if (isset($_ENV["APP_KEY"])) { array_push($alerts, "laravel_app_key=" . $_ENV["APP_KEY"]); } } else if (_AAS69()) { $dev_mode = _AAS66("APP_ENV", "dev"); $debug_mode = _AAS66("APP_DEBUG", "1"); if ($dev_mode) { array_push($alerts, "symfony_dev_mode=true"); } if ($dev_mode || $debug_mode) { array_push($alerts, "symfony_debug_mode=true"); } if (isset($_ENV["APP_SECRET"])) { array_push($alerts, "symfony_app_secret=" . $_ENV["APP_SECRET"]); } } else if (_AAS70()) { if (_AAS66("CI_ENVIRONMENT", "development")) { array_push($alerts, "codeigniter_debug_mode=true"); } } else if (class_exists('Yii')) { if (defined('YII_DEBUG') && constant('YII_DEBUG') === true) { array_push($alerts, "yii_debug_mode=true"); } if (defined('YII_ENV') && constant('YII_ENV') === 'dev') { array_push($alerts, "yii_dev_mode=true"); } } if (count($alerts) > 0) { _AAS38("Aspect_Alerts", $alerts, $_SERVER["SCRIPT_FILENAME"], 0); } } function _AAS71() { _AAS65(); } function _AAS46() { _AAS67(); } function _AAS72() { try { if (!_AAS70()) { return false; } _AAS41("enumerating codeigniter routes"); $routes = (new _AAS62($GLOBALS['app'])) ->router ->collection ->routes ->object; if (!$routes) { return false; } $impl_idx = strpos($_SERVER['SCRIPT_NAME'], '/index.php'); if ($impl_idx === false) { return false; } $basedir = substr($_SERVER['SCRIPT_NAME'], 0, $impl_idx); $methods = array('get', 'head', 'post', 'put', 'delete', 'patch'); $result = array(); foreach($methods as $method) { $uc_method = strtoupper($method); if (!isset($routes[$method]) || count($routes[$method]) === 0) { continue; } foreach($routes[$method] as $template => $handler) { if (is_string($template) && $template !== '/') { array_push($result, "$uc_method $basedir/$template"); } } } return $result; } catch (\Exception $e) { _AAS41("error getting codeigniter routes $e"); return false; } } function _AAS73() { try { if (!_AAS69()) { return false; } _AAS41("enumerating symfony routes"); $router = (new _AAS62($GLOBALS['app'])) ->getContainer() ->get('router'); if ($router->object === null) { _AAS41("error getting symfony router"); return false; } $generator = $router->getGenerator()->object; if ($generator === null) { _AAS41("error getting symfony generator"); return false; } $baseUrl = $generator->getContext()->getBaseUrl(); $routes = $router ->getRouteCollection() ->object; if ($routes === null) { _AAS41("error getting symfony routes"); return false; } $result = array(); foreach ($routes as $route) { foreach ($route->getMethods() as $method) { $url = $route->getPath(); array_push($result, "$method $baseUrl$url"); } } return $result; } catch (\Exception $e) { _AAS41("error getting symfony routes $e"); return false; } } function _AAS74() { try { if (!_AAS68()) { return false; } _AAS41("enumerating laravel routes"); $generateUrl = $GLOBALS['app']->url; if (!class_exists('Route')) { return false; } $routes = Route::getRoutes(); $result = array(); foreach ($routes as $route) { if (!property_exists($route, "methods")) continue; if (!property_exists($route, "uri")) continue; $url = parse_url($generateUrl->to($route->uri), PHP_URL_PATH); foreach ($route->methods as $method) { array_push($result, "$method $url"); } } return $result; } catch (\Exception $e) { _AAS41("error getting laravel routes $e"); return false; } } function _AAS45() { if ($routes = @_AAS74()) { _AAS38("Routes", $routes, $_SERVER["SCRIPT_FILENAME"], 0, "laravel"); } else if ($routes = @_AAS72()) { _AAS38("Routes", $routes, $_SERVER["SCRIPT_FILENAME"], 0, "codeigniter"); } else if ($routes = @_AAS73()) { _AAS38("Routes", $routes, $_SERVER["SCRIPT_FILENAME"], 0, "symfony"); } }  class _AAS49 { public $context; private $handle; public function stream_open($path, $mode, $options, &$opened_path) { if (strpos($path, 'sensor+processed://') !== 0) { _AAS41("unexpected URL for stream \"$path\""); return false; } $opened_path = substr($path, 19); $processed_path = _AAS51::ProcessFile($opened_path); $this->handle = @fopen($processed_path, 'r'); if ($this->handle === false) { _AAS41("error opening \"$processed_path\" while including \"$opened_path\""); return false; } return true; } public function stream_read($count) { return fread($this->handle, $count); } public function stream_close() { return fclose($this->handle); } public function stream_eof() { return feof($this->handle); } public function stream_seek($offset, $whence = SEEK_SET) { return fseek($this->handle, $offset, $whence); } public function stream_set_option($option, $arg1, $arg2) { return false; } public function stream_stat() { return fstat($this->handle); } public static function register() { if (!in_array('sensor+processed', stream_get_wrappers())) { stream_wrapper_register('sensor+processed', __CLASS__, 0); } } public static function getURL($path) { return "sensor+processed://$path"; } }  class _AAS51 { private $the_file; private $tokens; private $token_count; public $injected_code; public $code_hooked; private $namespaces; private $evaled_code; private $first_php_tag; public function __construct($the_file, $evaled_code) { $this->the_file = str_replace("\\", "/", $the_file); $this->file_dir = dirname($the_file); $this->injected_code = ""; $this->code_hooked = false; $this->namespaces = ""; $this->evaled_code = $evaled_code; $this->first_php_tag = true; } private function ReplaceToken($token) { if (is_string($token)) { return $token; } else { switch ($token[0]) { case T_FILE: $this->code_hooked = true; return '"' . $this->the_file . '"'; break; case T_DIR: $this->code_hooked = true; return '"' . $this->file_dir . '"'; break; case T_OPEN_TAG: if ($this->first_php_tag && $this->evaled_code) { $this->first_php_tag = false; return ""; } default: return $token[1]; } } } private function ProcessStringWithVariables(&$token_index) { $result = "\""; $token_index++; while ($token_index < $this->token_count) { $token = $this->tokens[$token_index]; if (is_string($token)) { $result .= $token; if ($token == "\"") break; } else { $result .= $token[1]; } $token_index++; } return $result; } private function ProcessInclude(&$token_index) { $function_name = ""; $required = ""; $once = ""; $token = $this->tokens[$token_index]; $line = isset($token[2]) ? $token[2] : 0; switch ($token[0]) { case T_INCLUDE: $function_name = "include"; $required = "false"; $once = "false"; break; case T_INCLUDE_ONCE: $function_name = "include_once"; $required = "false"; $once = "true"; break; case T_REQUIRE: $function_name = "require"; $required = "true"; $once = "false"; break; case T_REQUIRE_ONCE: $function_name = "require_once"; $required = "true"; $once = "true"; break; } $to_include = ""; $opened_parenthesis = 0; $opened_ternary = 0; $token_index++; while ($token_index < $this->token_count) { $token = $this->tokens[$token_index]; if ($token === '(' || $token === '[') { ++$opened_parenthesis; } elseif ($token === ')' || $token === ']') { --$opened_parenthesis; if ($opened_parenthesis < 0) { --$token_index; break; } } elseif ($token === '?') { ++$opened_ternary; } elseif ($token === ':') { --$opened_ternary; if ($opened_ternary < 0) { --$token_index; break; } } elseif ($token === ';') { $token_index--; break; } elseif ($token === ',') { if ($opened_parenthesis <= 0) { --$token_index; break; } } elseif (is_array($token)) { if ($token[0] === T_CLOSE_TAG) { $token_index--; break; } elseif ($token[0] === T_DOUBLE_ARROW) { if ($opened_parenthesis <= 0) { --$token_index; break; } } } $to_include .= $this->ProcessNextGroup($token_index); $token_index++; } $this->code_hooked = true; return "$function_name(_AAS48(\"$this->the_file\",$line,$required,$once,\"$function_name\",$to_include))"; } private function SkipWhiteSpaceAndComments(&$token_index) { while ($token_index < $this->token_count) { $token = $this->tokens[$token_index]; if (is_array($token) && ($token[0] === T_COMMENT || $token[0] === T_ML_COMMENT || $token[0] === T_DOC_COMMENT || $token[0] === T_WHITESPACE)) $token_index++; else break; } } private function GetArrayIndex(&$token_index, $start_token, $end_token, &$is_string_const, &$index) { $index = ""; $is_string_const = true; $look_ahead = $token_index; $pars = 1; while ($look_ahead < $this->token_count) { $token = $this->tokens[$look_ahead]; if ($token === $start_token) $pars++; if ($token === $end_token) $pars--; if ($pars <= 0) break; if ($token === ";") { return false; } else { if ( is_array($token) && $token[0] !== T_COMMENT && $token[0] !== T_ML_COMMENT && $token[0] !== T_DOC_COMMENT && $token[0] !== T_WHITESPACE && $token[0] !== T_CONSTANT_ENCAPSED_STRING ) $is_string_const = false; $index .= $this->ProcessNextGroup($look_ahead); } $look_ahead++; } $token_index = $look_ahead; return true; } private function GetFunctionArgument(&$token_index, &$argument) { $argument = ""; $token_index++; $pars = 1; while ($token_index < $this->token_count) { $token = $this->tokens[$token_index]; if ($token === "(") $pars++; elseif ($token === ")") $pars--; if ($pars <= 0) break; $argument .= $this->ProcessNextGroup($token_index); $token_index++; } return true; } private function GetLineNumber($token_index) { $token = $this->tokens[$token_index]; return isset($token[2]) ? $token[2] : 0; } private function ProcessFunctionCall(&$token_index, $function_name) { $line = $this->GetLineNumber($token_index); $look_ahead = $token_index + 1; $this->SkipWhiteSpaceAndComments($look_ahead); $token = $this->tokens[$look_ahead]; if ($token === "(") { if (array_key_exists($function_name, $_ENV["_AAS18"])) { $arguments = ""; $function_arguments = $this->GetFunctionArgument($look_ahead, $arguments); if ($function_arguments) { $token_index = $look_ahead; $this->code_hooked = true; return "_AAS52(\"$this->the_file\",$line,\"$function_name\",$arguments)"; } else { return $function_name; } } return $function_name; } elseif (is_array($token) && $token[0] === T_DOUBLE_COLON) { ++$look_ahead; $this->SkipWhiteSpaceAndComments($look_ahead); $token = $this->tokens[$look_ahead]; if (is_array($token) && $token[0] = T_STRING) { $class = $function_name; $static_function = $token[1]; $token_index = $look_ahead; return $this->ProcessFunctionCall($token_index, "$class::$static_function"); } } return $function_name; } private function ProcessFunctionDefinition(&$token_index) { $result = 'function '; $token_index++; $this->SkipWhiteSpaceAndComments($token_index); $pars = -1; while ($token_index < $this->token_count) { $token = $this->tokens[$token_index]; if ($token === '(') { $pars++; if ($pars == 0) $pars = 1; } elseif ($token == ')' && --$pars == 0) { return $result . ')'; } if (is_array($token)) $result .= $token[1]; else $result .= $token; $token_index++; } } private function SkipToNextNonWhitespace(&$token_index, $prefix) { $token_index++; $result = "$prefix"; while ($token_index < $this->token_count) { $token = $this->tokens[$token_index]; $result .= $this->ReplaceToken($token); if (!is_array($token)) { break; } elseif ($token[0] !== T_WHITESPACE) { break; } $token_index++; } return $result; } private function EscapeString($string) { $result = ""; for ($i = 0; $i < _AAS40($string); $i++) { switch ($string[$i]) { case "\\": $result .= "\\\\"; break; case "$": $result .= "\\\$"; break; default: $result .= $string[$i]; } } return $result; } private function ProcessVariable(&$token_index) { $token = $this->tokens[$token_index]; $result = $token[1]; $line = isset($token[2]) ? $token[2] : 0; $look_ahead = $token_index + 1; $this->SkipWhiteSpaceAndComments($look_ahead); while ($look_ahead < $this->token_count) { $token = $this->tokens[$look_ahead]; if ($token === "{" || $token === "[") { $look_ahead++; $is_string_const = false; $index = ""; $end_token = ($token === "{") ? "}" : "]"; $array_index = $this->GetArrayIndex($look_ahead, $token, $end_token, $is_string_const, $index); if (array_key_exists($result, $_ENV["_AAS17"])) { $opt = $_ENV["_AAS17"][$result]; } else { $opt = false; } if ($array_index && isset($opt) && $opt !== false) { if ($is_string_const) _AAS38("Var_Reference", array($opt[0], trim($index, "\"'")), $this->the_file, $line); $this->code_hooked = true; $result .= "[_AAS58(\"$this->the_file\", $line, \"" . $this->EscapeString($result) . "\", $index)]"; $token_index = $look_ahead; } elseif ($array_index) { $result .= "[$index]"; $token_index = $look_ahead; } else { $token_index = $look_ahead - 1; break; } } elseif ($token === "(") { $argument = ""; $function_argument = $this->GetFunctionArgument($look_ahead, $argument); if ($function_argument) { $this->code_hooked = true; $result = "_AAS52(\"$this->the_file\",$line,$result,$argument)"; $token_index = $look_ahead; } else { $result .= "("; $token_index = $look_ahead; } break; } elseif (is_array($token) && $token[0] === T_OBJECT_OPERATOR) { $look_ahead++; $this->SkipWhiteSpaceAndComments($look_ahead); $token = $this->tokens[$look_ahead]; if (is_array($token) && $token[0] === T_STRING) { $function_name = $token[1]; $this->SkipWhiteSpaceAndComments($look_ahead); $look_ahead++; $token = $this->tokens[$look_ahead]; if ($token === "(") { $argument = ""; $function_arguments = $this->GetFunctionArgument($look_ahead, $argument); if ($function_arguments) { if ($result != '$this' && array_key_exists($function_name, $_ENV["_AAS27"])) { $this->code_hooked = true; $result = "_AAS56(\"$this->the_file\",$line,$result,\"$function_name\",$argument)"; } else { $result .= "->$function_name($argument)"; } $token_index = $look_ahead; } else { $result .= "->$function_name"; } } else { break; } } else { break; } } else { break; } $look_ahead++; } return $result; } private function ProcessEval(&$token_index) { $token = $this->tokens[$token_index]; $result = "eval"; if ($this->evaled_code) { return $result; } $line = isset($token[2]) ? $token[2] : 0; $look_ahead = $token_index + 1; $this->SkipWhiteSpaceAndComments($look_ahead); $token = $this->tokens[$look_ahead]; if ($token === "(") { $arguments = ""; $function_arguments = $this->GetFunctionArgument($look_ahead, $arguments); if ($function_arguments) { $token_index = $look_ahead; $this->code_hooked = true; $result .= "(_AAS50(\"$this->the_file\", $line, $arguments))"; } } return $result; } private function ProcessExit(&$token_index) { $result = "_AAS33"; $token_index++; $this->SkipWhiteSpaceAndComments($token_index); if ($this->tokens[$token_index] !== "(") { $this->code_hooked = true; $result .= "()"; } $token_index--; return $result; } private function ProcessNamespace(&$token_index) { if ($this->namespaces !== '') return 'namespace'; $look_ahead = $token_index + 1; $this->SkipWhiteSpaceAndComments($look_ahead); while ($look_ahead < $this->token_count) { $token = $this->tokens[$look_ahead]; if ($token === '{') { $this->namespaces = '{'; break; } if ( is_array($token) && ($token[0] === T_STRING || $token[0] === T_NS_SEPARATOR) ) { $look_ahead++; continue; } if ( is_array($token) && ($token[0] === T_WHITESPACE || $token[0] === T_COMMENT) ) { $this->SkipWhiteSpaceAndComments($look_ahead); continue; } break; } return 'namespace'; } private function ProcessNextGroup(&$token_index) { $result = ""; $token = $this->tokens[$token_index]; if (is_string($token)) { switch ($token) { case "\"": $result = $this->ProcessStringWithVariables($token_index); break; default: $result .= $this->ReplaceToken($token); } } else { switch ($token[0]) { case T_INCLUDE: case T_INCLUDE_ONCE: case T_REQUIRE: case T_REQUIRE_ONCE: $result .= $this->ProcessInclude($token_index); break; case T_VARIABLE: $result .= $this->ProcessVariable($token_index); break; case T_FUNCTION: $result .= $this->ProcessFunctionDefinition($token_index); break; case T_NEW: $result .= $this->SkipToNextNonWhitespace($token_index, "new"); break; case T_CLASS: $result .= $this->SkipToNextNonWhitespace($token_index, "class"); break; case T_DOUBLE_COLON: $result .= $this->SkipToNextNonWhitespace($token_index, "::"); break; case T_OBJECT_OPERATOR: $result .= $this->SkipToNextNonWhitespace($token_index, "->"); break; case T_EXTENDS: $result .= $this->SkipToNextNonWhitespace($token_index, "extends"); break; case T_STRING: $result .= $this->ProcessFunctionCall($token_index, $token[1]); break; case T_WHITESPACE: $result .= $this->ReplaceToken($token); break; case T_EVAL: $result .= $this->ProcessEval($token_index); break; case T_EXIT: $result .= $this->ProcessExit($token_index); break; case T_HALT_COMPILER: $token_index = $this->token_count; break; case T_START_HEREDOC: case T_END_HEREDOC: $result .= $this->ReplaceToken($token[1]); break; case T_NAMESPACE: $result .= $this->ProcessNamespace($token_index); break; case T_OPEN_TAG: case T_CLOSE_TAG: $result .= $this->ReplaceToken($token); break; default: $result .= $this->ReplaceToken($token); } } return $result; } public function ProcessCode($phpcode, $output_file) { $this->tokens = token_get_all( $this->evaled_code ? '<?php ' . $phpcode : $phpcode ); $this->token_count = count($this->tokens); for ($i = 0; $i < $this->token_count; ++$i) { $this->injected_code .= $this->ProcessNextGroup($i); } if ($output_file !== false) { if ($fp = @fopen($output_file, "w+")) { @fwrite($fp, $this->injected_code); @fclose($fp); } else { _AAS41("unable to create cache file"); _AAS33("writing injected code failed"); } return $output_file; } else { return $this->injected_code; } } public static function ProcessFile($filename) { $contents_signature = md5_file($filename); if ($contents_signature === false) { _AAS33("unable to access \"$filename\" contents"); } $cache_name = $_ENV['_AAS32'] . "_AAS75" . md5(_AAS10 . $contents_signature . $filename); if (file_exists($cache_name)) { return $cache_name; } $__AAOP_Processor = new _AAS51($filename, false); $__AAOP_Processor->ProcessCode( file_get_contents($filename), $cache_name ); return $cache_name; } public static function ProcessEvaledCode($filename, $line, $code) { $__AAOP_Processor = new _AAS51($filename, true); return $__AAOP_Processor->ProcessCode($code, false); } }  function _AAS76($filename) { if (!preg_match('/[\/\\\\]installed\.json$/', $filename, $matches)) { return; } $contents = @file_get_contents($filename); if (!$contents) { return; } $parsed = json_decode($contents, true); if (!$parsed) { return; } if (!is_array($parsed)) { return; } $packages = null; if (array_key_exists("packages", $parsed)) { $packages = $parsed["packages"]; } elseif (array_key_exists(0, $parsed)) { $packages = $parsed; } else { return; } $libraries = array(); foreach ($packages as $package) { $name = @$package["name"]; $version = @$package["version_normalized"]; if ($name && $version) { $libraries[$name . "@" . $version] = true; } } return array_keys($libraries); } function _AAS77() { $basedir = @realpath(@dirname($_ENV["_AAS30"]) . '/..'); if ($basedir === false) { return; } $installed_json = @realpath($basedir . '/vendor/composer/installed.json'); if($installed_json !== false) { return $installed_json; } return false; } function _AAS68() { if (!isset($GLOBALS['app'])) { return false; } if (get_class($GLOBALS['app']) !== 'Illuminate\Foundation\Application') { return false; } return true; } function _AAS69() { if (!isset($GLOBALS['app'])) { return false; } if (get_class($GLOBALS['app']) !== 'App\Kernel') { return false; } return true; } function _AAS70() { if (!isset($GLOBALS['app'])) { return false; } if (get_class($GLOBALS['app']) !== 'CodeIgniter\CodeIgniter') { return false; } return true; } function _AAS78($buffer, $phase) { return $buffer; } function _AAS79() { if (isset($_SERVER["HTTP_ACUNETIX_ASPECT_QUERIES"])) { $queries = array(); foreach (explode(";", $_SERVER["HTTP_ACUNETIX_ASPECT_QUERIES"]) as $query) { $queries[strtolower(trim($query))] = true; } if ($queries["aspectalerts"]) { $_ENV["_AAS14"] = true; _AAS71(); } $filelist = null; if ($queries["filelist"]) { $filelist = _AAS60($_ENV['_AAS29'], 10, 10000); _AAS38("File_List", $filelist, $_ENV['_AAS30'], 0); } if ($queries["packages"]) { if (!$filelist) { $filelist = _AAS60($_ENV['_AAS29'], 10, 10000); } foreach ($filelist as $filename) { $libraries = _AAS76($filename); if ($libraries) { _AAS38("Packages", $libraries, $filename, 0, "composer"); } } $fixed_installed_json = _AAS77(); if ($fixed_installed_json) { $libraries = _AAS76($fixed_installed_json); if ($libraries) { _AAS38("Packages", $libraries, $fixed_installed_json, 0, "composer"); } } } if ($queries["routes"]) { $_ENV["_AAS13"] = true; } } } if ($_ENV["_AAS0"]) { ob_start("_AAS78"); set_error_handler("_AAS43"); _AAS41("Called with ".$_SERVER["REQUEST_METHOD"]." method for URI: ".$_SERVER["REQUEST_URI"]); _AAS38("PONG", "", "", 0); _AAS38("sv", "php-".$_ENV["SensorVersion"], "", 0); _AAS49::register(); _AAS79(); if (isset($_SERVER["REDIRECT_STATUS"]) && isset($_SERVER["REDIRECT_URL"]) && $_SERVER["REDIRECT_STATUS"] == 200){ _AAS38("Script_Name", $_SERVER["SCRIPT_NAME"], $_ENV['_AAS30'], 0); if (count($_GET)>0) _AAS38("Script_Query", _AAS61(), $_ENV['_AAS30'], 0); } array_push($_ENV['_AAS16'], $_ENV['_AAS30']); _AAS44(); require _AAS49::getURL($_ENV['_AAS30']); _AAS33(); } __halt_compiler();
fdc59beed2524ca714b49fa813a0f924